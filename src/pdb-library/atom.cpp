#include "atom.h"
#include "string.h"

namespace tnpdb {

	// FUNCTIONS DEFINITIONS
	// Constructor
	//////////////////////////////////////////////////////////////////////////////////////////////
	atom::atom(){
		_etype = atom::T_INV;
		_segment_id = "    ";
		_name = atom::N_INV;
		_rec = 'A';  //ATOM or HETATM
	}

	// Overloadiing operator functions
	//////////////////////////////////////////////////////////////////////////////////////////////
	bool atom::operator < (const atom &atm) const {
		if (_index < atm._index) {
			return true;
		} else if (_index > atm._index) {
			return false;
		} else {
			return (_etype < atm._etype);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	bool atom::operator == (const atom &atm) const {
		if (_index != atm._index) {
			return false;
		} else {
			return (_etype == atm._etype);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	bool atom::operator != (const atom &atm) const {
		return !operator==(atm);
	}

	// Methods for retrieving data
	//////////////////////////////////////////////////////////////////////////////////////////////
	index<atom> atom::get_index() const {
		//assert(_index);
		return _index;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	const point &atom::get_coords() const {
		return _coords;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	float atom::get_occupancy() const {
		return _occupancy;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	float atom::get_temp_factor() const {
		return _temp_factor;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	const char *atom::get_segment_id() const {
		return _segment_id.c_str();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	const char *atom::get_element() const {
		return _element.c_str();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	const char *atom::get_charge() const {
		return _charge.c_str();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	atom::etype atom::get_etype() const {
		return _etype;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	atom::name atom::get_name() const {
		return _name;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	const char atom::get_rec() const {
		return _rec;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	const char atom::get_alt_loc() const {
		return _alt_loc;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	bool  atom::get_ter() const {
		return _ter;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	float  atom::get_vdW_radii() const {
		if (_etype == atom::H) {
			return 1.17;
		} else if (_etype == atom::C) {
			return 1.75;
		} else if (_etype == atom::N) {
			return 1.55;
		} else if (_etype == atom::O) {
			return 1.40;
		} else if (_etype == atom::P) {
			return 1.80;
		} else if (_etype == atom::S) {
			return 1.80;
		} else if (_etype == atom::MG) {
			return 1.73;
		} else if (_etype == atom::ZN) {
			return 1.39;
		} else if (_etype == atom::CA) {
			return 1.80;
		} else if (_etype == atom::NA) {
			return 2.27;
		} else if (_etype == atom::NI) {
			return 1.63;
		} else if (_etype == atom::CL) {
			return 1.75;
		} else if (_etype == atom::FE) {
			return 1.40;
		}
		return 1.6; //Average
	}
	

	// Methods for setting data
	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_index(index<atom> i) {
		assert(i);
		_index = i;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_coords(const point &p) {
		_coords = p;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_occupancy(float oc) {
		_occupancy = oc;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_temp_factor(float tf) {
		_temp_factor = tf;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_segment_id(const char *si) {
		_segment_id = si;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_element(const char *el) {
		_element = el;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_charge(const char *ch) {
		_charge = ch;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_etype(atom::etype ty) {
		_etype = ty;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_name(atom::name la) {
		_name = la;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_rec(char r) {
		_rec = r;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_alt_loc(char a) {
		_alt_loc = a;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	void atom::set_ter(bool b) {
		_ter = b;
	}


};

